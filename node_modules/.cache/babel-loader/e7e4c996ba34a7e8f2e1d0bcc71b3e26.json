{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport DashBoardLayOut from '../../layouts/AdminDashboardLayout';\nimport CreateFarmForm from '../../components/createFarm';\nimport isAdmin from '../../middlewares/isAdmin';\nimport $ from 'jquery';\nimport httpHelper from \"../../helpers/httpHelper\";\nimport HelpBlock from \"../../components/loginForm\";\nimport FormHelpText from \"../../components/signupForm\";\nimport Router from \"next/dist/client/router\";\n\nvar createFarm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(createFarm, _React$Component);\n\n  _createClass(createFarm, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var req;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = _ref.req;\n                return _context.abrupt(\"return\", {\n                  farmId: req.params.farmId\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function createFarm(props) {\n    var _this;\n\n    _classCallCheck(this, createFarm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(createFarm).call(this, props));\n    _this.state = {\n      name: '',\n      redirect: false,\n      emailHelpText: {\n        state: false,\n        error: false,\n        text: ''\n      },\n      nameHelpText: {\n        state: false,\n        error: false,\n        text: ''\n      },\n      helpBlock: {\n        state: false,\n        error: false,\n        text: ''\n      },\n      formValues: {\n        status: '1'\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(createFarm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      isAdmin();\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var target = event.target;\n      var value = target.type === 'checkbox' ? target.checked : target.value;\n      var name = target.name;\n      this.setState(_defineProperty({}, name, value));\n\n      switch (target.name) {\n        case 'name':\n          this.validateName(target.value);\n          break;\n\n        case 'email':\n          this.validateEmail(target.value);\n          break;\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n      this.setState({\n        loginHelpBlock: {\n          state: false,\n          error: false,\n          text: ''\n        }\n      });\n      var formData = new FormData();\n      formData.append('name', this.state.name);\n      formData.append('email', this.state.email);\n      formData.append('permission', this.state.permission);\n      httpHelper.httpReq('http://localhost:3009/api/v1/user/admin/create', formData, 'POST').then(function (response) {\n        if (response.success) {\n          _this2.setState({\n            helpBlock: {\n              state: true,\n              error: false,\n              text: 'user created successfully'\n            }\n          });\n        } else {\n          _this2.setState({\n            helpBlock: {\n              state: true,\n              error: true,\n              text: 'error creating user'\n            }\n          });\n        }\n      }).catch(function (error) {\n        _this2.setState({\n          helpBlock: {\n            state: true,\n            error: true,\n            text: 'error creating user'\n          }\n        });\n      });\n    }\n  }, {\n    key: \"validateEmail\",\n    value: function validateEmail(email) {\n      var _this3 = this;\n\n      if (email !== 'undefined') {\n        return new _Promise(function (resolve, reject) {\n          httpHelper.httpReq('http://localhost:3009/api/v1/email/exists?email=' + email, '', 'GET').then(function (result) {\n            // console.log(JSON.stringify(result),'does email exist');\n            console.log(result.success.message, 'result message');\n\n            if (result.success.message === \"true\") {\n              console.log(\"this is true\");\n\n              _this3.setState({\n                emailHelpText: {\n                  state: true,\n                  error: true,\n                  text: 'Email already exist'\n                }\n              });\n            } else {\n              _this3.setState({\n                emailHelpText: {\n                  state: false,\n                  error: false,\n                  text: ' '\n                }\n              });\n            }\n\n            resolve(_this3.state.emailHelpText.error);\n          }).catch(function (error) {\n            console.log(error);\n          });\n        });\n      } else {\n        this.setState({\n          emailHelpText: {\n            state: true,\n            error: true,\n            text: 'Email already exist'\n          }\n        });\n      }\n    }\n  }, {\n    key: \"validateName\",\n    value: function validateName(input) {\n      if (input.trim() === '') {\n        this.setState({\n          nameHelpText: {\n            state: true,\n            error: true,\n            text: 'Name is required'\n          }\n        });\n        return false;\n      } else {\n        this.setState({\n          nameHelpText: {\n            state: false,\n            error: false,\n            text: 'Name is required'\n          }\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"getAdminTypes\",\n    value: function getAdminTypes() {\n      var _this4 = this;\n\n      httpHelper.serverReq('http://localhost:3009/api/v1/farms/all').then(function (response) {\n        if (response.success) {\n          _this4.setState({\n            userTypes: response.success.data\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(DashBoardLayOut, null, React.createElement(\"hr\", null), React.createElement(\"h2\", {\n        id: \"form-head\"\n      }, \"Create Admin User\"), React.createElement(\"br\", null), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\"\n      }, React.createElement(\"div\", {\n        className: \"panel panel-primary\",\n        \"data-collapsed\": \"0\",\n        id: \"form\"\n      }, React.createElement(\"div\", {\n        className: \"panel-body\"\n      }, React.createElement(\"form\", {\n        role: \"form\",\n        id: \"farmForm\",\n        ref: this.form,\n        onSubmit: this.handleSubmit,\n        className: \"form-horizontal  form-groups-bordered\"\n      }, this.state.helpBlock.state ? React.createElement(HelpBlock, {\n        type: this.state.helpBlock.error,\n        text: this.state.helpBlock.text\n      }) : '', React.createElement(\"div\", {\n        className: \"form-group\"\n      }, React.createElement(\"label\", {\n        htmlFor: \"field-1\",\n        className: \"col-sm-3 control-label\"\n      }, \" Name\"), React.createElement(\"div\", {\n        className: \"col-sm-5\"\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        value: this.state.formValues.name,\n        required: \"required\",\n        onChange: this.handleChange,\n        className: \"form-control\",\n        id: \"field-1\",\n        placeholder: \"Enter User's Name\"\n      }))), React.createElement(\"div\", {\n        className: \"form-group\"\n      }, React.createElement(\"label\", {\n        htmlFor: \"field-1\",\n        className: \"col-sm-3 control-label\"\n      }, \"Email\"), React.createElement(\"div\", {\n        className: \"col-sm-5\"\n      }, React.createElement(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        value: this.state.formValues.email,\n        required: \"required\",\n        onChange: this.handleChange,\n        className: \"form-control\",\n        id: \"field-1\",\n        placeholder: \"Enter User's Email\"\n      }), this.state.emailHelpText.state ? React.createElement(FormHelpText, {\n        type: this.state.emailHelpText.error,\n        text: this.state.emailHelpText.text\n      }) : '')), React.createElement(\"div\", {\n        className: \"col-sm-5\"\n      }, React.createElement(\"button\", {\n        className: \"btn btn-primary\"\n      }, \"Create\"))))))));\n    }\n  }]);\n\n  return createFarm;\n}(React.Component);\n\nexport default createFarm;","map":{"version":3,"sources":["C:\\xampp\\htdocs\\easycow\\pages\\admin\\create-user.js"],"names":["React","DashBoardLayOut","CreateFarmForm","isAdmin","$","httpHelper","HelpBlock","FormHelpText","Router","createFarm","req","farmId","params","props","state","name","redirect","emailHelpText","error","text","nameHelpText","helpBlock","formValues","status","handleChange","bind","handleSubmit","e","target","event","value","type","checked","setState","validateName","validateEmail","preventDefault","loginHelpBlock","formData","FormData","append","email","permission","httpReq","then","response","success","catch","resolve","reject","result","console","log","message","input","trim","serverReq","userTypes","data","form","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport DashBoardLayOut from '../../layouts/AdminDashboardLayout';\r\nimport CreateFarmForm from '../../components/createFarm';\r\nimport isAdmin from  '../../middlewares/isAdmin';\r\nimport $ from 'jquery';\r\nimport httpHelper from \"../../helpers/httpHelper\";\r\nimport HelpBlock from \"../../components/loginForm\";\r\nimport FormHelpText from \"../../components/signupForm\";\r\nimport Router from \"next/dist/client/router\";\r\n\r\nclass createFarm extends React.Component{\r\n\r\n  static async getInitialProps({ req }) {\r\n    return {farmId:req.params.farmId};\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      name:'',\r\n      redirect:false,\r\n      emailHelpText :{\r\n        state:false,\r\n        error:false,\r\n        text:''\r\n      },\r\n      nameHelpText:{\r\n        state:false,\r\n        error:false,\r\n        text:''\r\n      },\r\n      helpBlock:{\r\n        state:false,\r\n        error:false,\r\n        text:''\r\n      },\r\n      formValues:{status:'1'}\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    isAdmin();\r\n\r\n  }\r\n\r\n  handleChange(e){\r\n\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n    switch (target.name) {\r\n      case 'name':\r\n        this.validateName(target.value);\r\n        break;\r\n\r\n      case 'email':\r\n        this.validateEmail(target.value);\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n  handleSubmit(e){\r\n    e.preventDefault();\r\n    this.setState({ loginHelpBlock:{\r\n        state:false,\r\n        error:false,\r\n        text:''\r\n      }});\r\n\r\n    let formData = new FormData();\r\n    formData.append('name',this.state.name);\r\n    formData.append('email',this.state.email);\r\n    formData.append('permission',this.state.permission);\r\n\r\n\r\n\r\n    httpHelper.httpReq('http://localhost:3009/api/v1/user/admin/create',formData,'POST')\r\n      .then((response)=>{\r\n        if (response.success){\r\n          this.setState({ helpBlock:{\r\n              state:true,\r\n              error:false,\r\n              text:'user created successfully'\r\n            }});\r\n        }else{\r\n          this.setState({ helpBlock:{\r\n              state:true,\r\n              error:true,\r\n              text:'error creating user'\r\n            }});\r\n        }\r\n      }).catch((error)=>{\r\n      this.setState({ helpBlock:{\r\n          state:true,\r\n          error:true,\r\n          text:'error creating user'\r\n        }});\r\n      });\r\n\r\n  }\r\n\r\n  validateEmail(email){\r\n    if (email !== 'undefined'){\r\n      return new Promise( (resolve,reject)=> {\r\n        httpHelper.httpReq('http://localhost:3009/api/v1/email/exists?email='+email,'','GET')\r\n          .then((result)=>{\r\n            // console.log(JSON.stringify(result),'does email exist');\r\n            console.log(result.success.message,'result message')\r\n            if (result.success.message === \"true\"){\r\n              console.log(\"this is true\")\r\n              this.setState({\r\n                emailHelpText:{\r\n                  state:true,\r\n                  error:true,\r\n                  text:'Email already exist'\r\n                }\r\n              });\r\n            }else{\r\n              this.setState({\r\n                emailHelpText:{\r\n                  state:false,\r\n                  error:false,\r\n                  text:' '\r\n                }\r\n              });\r\n            }\r\n            resolve(this.state.emailHelpText.error);\r\n          }).catch((error)=>{console.log(error)});\r\n      })\r\n    }else{\r\n      this.setState({\r\n        emailHelpText:{\r\n          state:true,\r\n          error:true,\r\n          text:'Email already exist'\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  validateName(input){\r\n    if (input.trim() === ''){\r\n      this.setState({nameHelpText:{\r\n          state:true,\r\n          error:true,\r\n          text:'Name is required'\r\n        }});\r\n      return false;\r\n    }else{\r\n      this.setState({nameHelpText:{\r\n          state:false,\r\n          error:false,\r\n          text:'Name is required'\r\n        }});\r\n      return true;\r\n    }\r\n  }\r\n\r\n  getAdminTypes(){\r\n    httpHelper.serverReq('http://localhost:3009/api/v1/farms/all').then( (response)=> {\r\n      if (response.success){\r\n        this.setState({userTypes:response.success.data});\r\n      }\r\n    })\r\n    }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <DashBoardLayOut>\r\n        <hr/>\r\n        <h2 id=\"form-head\">Create Admin User</h2>\r\n        <br/>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <div className=\"panel panel-primary\" data-collapsed=\"0\" id=\"form\">\r\n              <div className=\"panel-body\">\r\n                <form role=\"form\" id=\"farmForm\" ref={this.form} onSubmit={this.handleSubmit} className=\"form-horizontal  form-groups-bordered\">\r\n                  {\r\n\r\n                    this.state.helpBlock.state?<HelpBlock type={this.state.helpBlock.error} text={this.state.helpBlock.text} />:''\r\n                  }\r\n\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"field-1\" className=\"col-sm-3 control-label\"> Name</label>\r\n\r\n                    <div className=\"col-sm-5\">\r\n                      <input type=\"text\" name=\"name\" value={this.state.formValues.name} required=\"required\" onChange={this.handleChange} className=\"form-control\" id=\"field-1\" placeholder=\"Enter User's Name\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"field-1\" className=\"col-sm-3 control-label\">Email</label>\r\n\r\n                    <div className=\"col-sm-5\">\r\n                      <input type=\"email\" name=\"email\" value={this.state.formValues.email} required=\"required\" onChange={this.handleChange} className=\"form-control\" id=\"field-1\" placeholder=\"Enter User's Email\" />\r\n\r\n                      {\r\n\r\n                        this.state.emailHelpText.state?<FormHelpText type={this.state.emailHelpText.error} text={this.state.emailHelpText.text} />:''\r\n                      }\r\n                    </div>\r\n\r\n                  </div>\r\n\r\n                  <div className=\"col-sm-5\">\r\n                    <button className=\"btn btn-primary\">Create</button>\r\n                  </div>\r\n\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </DashBoardLayOut>\r\n    )\r\n  }\r\n}\r\n\r\nexport default createFarm;\r\n"]},"metadata":{},"sourceType":"module"}