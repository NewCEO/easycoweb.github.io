{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport DashBoardLayOut from '../../layouts/DashboardLayOut';\nimport payStackConf from \"../../config/paystack\";\nimport httpHelper from '../../helpers/httpHelper';\nimport SingleFarm from '../../components/singleFarm';\nimport { useRouter } from 'next/router';\nimport $ from 'jquery';\nimport Router from \"next/router\";\n\nvar investments =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(investments, _React$Component);\n\n  function investments(props) {\n    var _this;\n\n    _classCallCheck(this, investments);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(investments).call(this, props));\n    _this.state = {\n      investmentsRows: []\n    };\n    return _this;\n  }\n\n  _createClass(investments, [{\n    key: \"initDataTable\",\n    value: function initDataTable() {\n      jQuery(document).ready(function ($) {\n        var $table3 = jQuery(\"#table-3\");\n        var table3 = $table3.DataTable({\n          \"aLengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n        }); // Initalize Select Dropdown after DataTables is created\n\n        $table3.closest('.dataTables_wrapper').find('select').select2({\n          minimumResultsForSearch: -1\n        }); // Setup - add a text input to each footer cell\n\n        $('#table-3 tfoot th').each(function () {\n          var title = $('#table-3 thead th').eq($(this).index()).text();\n          $(this).html('<input type=\"text\" class=\"form-control\" placeholder=\"Search ' + title + '\" />');\n        }); // Apply the search\n\n        table3.columns().every(function () {\n          var that = this;\n          $('input', this.footer()).on('keyup change', function () {\n            if (that.search() !== this.value) {\n              that.search(this.value).draw();\n            }\n          });\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getTableData();\n    }\n  }, {\n    key: \"getTableData\",\n    value: function getTableData() {\n      var _this2 = this;\n\n      httpHelper.serverReq(\"http://localhost:3009/api/v1/user/investments\").then(function (response) {\n        if (response.success) {\n          var rows = response.success.data.map(function (investment) {\n            var interest = investment.invested_amount * investment.roi / 100;\n            return React.createElement(\"tr\", {\n              className: \"odd gradeX\",\n              key: investment.id\n            }, React.createElement(\"td\", null, investment.title), React.createElement(\"td\", null, new Date(investment.invested_date).toDateString()), React.createElement(\"td\", null, \"\\u20A6\", investment.invested_amount), React.createElement(\"td\", null, \"\\u20A6\", investment.roi, \"%\"), React.createElement(\"td\", null, _this2.calculateMonth(new Date(investment.farm_starts), new Date(investment.farm_ends)), \" Months\"), React.createElement(\"td\", null, _this2.calculatePaymentDate(investment.invested_date, _this2.calculateMonth(new Date(investment.farm_starts), new Date(investment.farm_ends)))), React.createElement(\"td\", null, \"\\u20A6\", interest), React.createElement(\"td\", null, \"\\u20A6\", interest + investment.invested_amount), React.createElement(\"td\", null, investment.investment_status));\n          });\n\n          _this2.setState({\n            investmentsRows: rows\n          });\n\n          _this2.initDataTable();\n        }\n      });\n    }\n  }, {\n    key: \"calculatePaymentDate\",\n    value: function calculatePaymentDate(investedDate, duration) {\n      var date = new Date(investedDate);\n      date.setMonth(new Date(investedDate).getMonth() + duration);\n      return date.toDateString();\n    }\n  }, {\n    key: \"calculateMonth\",\n    value: function calculateMonth(d1, d2) {\n      var months;\n      months = (d2.getFullYear() - d1.getFullYear()) * 12;\n      months -= d1.getMonth();\n      months += d2.getMonth();\n      return months <= 0 ? 0 : months;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(DashBoardLayOut, null, React.createElement(\"h2\", {\n        className: \"text-center\",\n        id: \"form-head\"\n      }, \"Investments\"), React.createElement(\"br\", null), React.createElement(\"table\", {\n        className: \"table table-bordered datatable\",\n        id: \"table-3\"\n      }, React.createElement(\"thead\", null, React.createElement(\"tr\", {\n        className: \"replace-inputs\"\n      }, React.createElement(\"th\", null, \"Farm Name\"), React.createElement(\"th\", null, \"Investment Date\"), React.createElement(\"th\", null, \"Invested Amount\"), React.createElement(\"th\", null, \"ROI\"), React.createElement(\"th\", null, \"Investment Duration\"), React.createElement(\"th\", null, \"Cashout Date\"), React.createElement(\"th\", null, \"Interest\"), React.createElement(\"th\", null, \"Amount Payable\"), React.createElement(\"th\", null, \"Investment Status\"))), React.createElement(\"tbody\", null, this.state.investmentsRows), React.createElement(\"tfoot\", null, React.createElement(\"tr\", null, React.createElement(\"th\", null, \"Farm Name\"), React.createElement(\"th\", null, \"Investment Date\"), React.createElement(\"th\", null, \"Invested Amount\"), React.createElement(\"th\", null, \"ROI\"), React.createElement(\"th\", null, \"Investment Duration\"), React.createElement(\"th\", null, \"Cashout Date\"), React.createElement(\"th\", null, \"Interest\"), React.createElement(\"th\", null, \"Amount Payable\"), React.createElement(\"th\", null, \"Investment Status\")))));\n    }\n  }]);\n\n  return investments;\n}(React.Component);\n\nexport default investments;","map":{"version":3,"sources":["C:\\xampp\\htdocs\\easycow\\pages\\user\\investments.js"],"names":["React","DashBoardLayOut","payStackConf","httpHelper","SingleFarm","useRouter","$","Router","investments","props","state","investmentsRows","jQuery","document","ready","$table3","table3","DataTable","closest","find","select2","minimumResultsForSearch","each","title","eq","index","text","html","columns","every","that","footer","on","search","value","draw","getTableData","serverReq","then","response","success","rows","data","map","investment","interest","invested_amount","roi","id","Date","invested_date","toDateString","calculateMonth","farm_starts","farm_ends","calculatePaymentDate","investment_status","setState","initDataTable","investedDate","duration","date","setMonth","getMonth","d1","d2","months","getFullYear","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport DashBoardLayOut from '../../layouts/DashboardLayOut';\r\nimport payStackConf from \"../../config/paystack\"\r\nimport httpHelper from '../../helpers/httpHelper';\r\nimport SingleFarm from '../../components/singleFarm';\r\nimport { useRouter } from 'next/router';\r\nimport $ from 'jquery';\r\nimport Router from \"next/router\";\r\n\r\n\r\nclass investments extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {investmentsRows:[]};\r\n  }\r\n\r\n  initDataTable(){\r\n    jQuery(document).ready(function($) {\r\n      var $table3 = jQuery(\"#table-3\");\r\n\r\n      var table3 = $table3.DataTable({\r\n        \"aLengthMenu\": [\r\n          [10, 25, 50, -1],\r\n          [10, 25, 50, \"All\"]\r\n        ]\r\n      });\r\n\r\n      // Initalize Select Dropdown after DataTables is created\r\n      $table3.closest('.dataTables_wrapper').find('select').select2({\r\n        minimumResultsForSearch: -1\r\n      });\r\n\r\n      // Setup - add a text input to each footer cell\r\n      $('#table-3 tfoot th').each(function() {\r\n        var title = $('#table-3 thead th').eq($(this).index()).text();\r\n        $(this).html('<input type=\"text\" class=\"form-control\" placeholder=\"Search ' + title + '\" />');\r\n      });\r\n\r\n      // Apply the search\r\n      table3.columns().every(function() {\r\n        var that = this;\r\n\r\n        $('input', this.footer()).on('keyup change', function() {\r\n          if (that.search() !== this.value) {\r\n            that\r\n              .search(this.value)\r\n              .draw();\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTableData();\r\n\r\n  }\r\n\r\n  getTableData(){\r\n    httpHelper.serverReq(\"http://localhost:3009/api/v1/user/investments\").then((response)=>{\r\n      if (response.success){\r\n       let rows =  response.success.data.map((investment)=>{\r\n         let interest = (investment.invested_amount * investment.roi)/100\r\n          return <tr className=\"odd gradeX\" key={investment.id}>\r\n                  <td>{investment.title}</td>\r\n                  <td>{new Date(investment.invested_date).toDateString()}</td>\r\n                  <td>&#8358;{investment.invested_amount}</td>\r\n                  <td>&#8358;{investment.roi}%</td>\r\n                  <td>{this.calculateMonth( new Date(investment.farm_starts),new Date(investment.farm_ends))} Months</td>\r\n                  <td>{this.calculatePaymentDate(investment.invested_date,this.calculateMonth(new Date(investment.farm_starts),new Date(investment.farm_ends)))}</td>\r\n                  <td>&#8358;{interest}</td>\r\n                  <td>&#8358;{interest+investment.invested_amount}</td>\r\n                  <td>{investment.investment_status}</td>\r\n          </tr>\r\n        });\r\n        this.setState({investmentsRows:rows});\r\n        this.initDataTable();\r\n\r\n      }\r\n    })\r\n  }\r\n\r\n  calculatePaymentDate(investedDate,duration){\r\n\r\n    let date = new Date(investedDate);\r\n    date.setMonth(new Date(investedDate).getMonth() + duration);\r\n    return  date.toDateString();\r\n\r\n  }\r\n\r\n\r\n  calculateMonth(d1,d2){\r\n    var months;\r\n    months = (d2.getFullYear() - d1.getFullYear()) * 12;\r\n    months -= d1.getMonth();\r\n    months += d2.getMonth();\r\n    return months <= 0 ? 0 : months;\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <DashBoardLayOut>\r\n        <h2 className=\"text-center\" id=\"form-head\">Investments</h2>\r\n        <br/>\r\n        <table className=\"table table-bordered datatable\" id=\"table-3\">\r\n          <thead>\r\n          <tr className=\"replace-inputs\">\r\n            <th>Farm Name</th>\r\n            <th>Investment Date</th>\r\n            <th>Invested Amount</th>\r\n\r\n            <th>ROI</th>\r\n            <th>Investment Duration</th>\r\n            <th>Cashout Date</th>\r\n            <th>Interest</th>\r\n            <th>Amount Payable</th>\r\n            <th>Investment Status</th>\r\n\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          {this.state.investmentsRows}\r\n          </tbody>\r\n          <tfoot>\r\n          <tr>\r\n            <th>Farm Name</th>\r\n            <th>Investment Date</th>\r\n            <th>Invested Amount</th>\r\n            <th>ROI</th>\r\n            <th>Investment Duration</th>\r\n            <th>Cashout Date</th>\r\n            <th>Interest</th>\r\n            <th>Amount Payable</th>\r\n            <th>Investment Status</th>\r\n\r\n          </tr>\r\n          </tfoot>\r\n        </table>\r\n      </DashBoardLayOut>\r\n    )\r\n  }\r\n}\r\n\r\nexport default investments;\r\n"]},"metadata":{},"sourceType":"module"}