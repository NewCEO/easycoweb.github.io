{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport serverFetch from 'node-fetch';\nimport { backend_v1 } from '../config/api_url';\n\nvar HttpHelper =\n/*#__PURE__*/\nfunction () {\n  function HttpHelper() {\n    _classCallCheck(this, HttpHelper);\n  }\n\n  _createClass(HttpHelper, null, [{\n    key: \"httpReq\",\n    value: function httpReq() {\n      var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var data = arguments.length > 1 ? arguments[1] : undefined;\n      var method = arguments.length > 2 ? arguments[2] : undefined;\n      var parameters = {\n        credentials: 'include',\n        method: method !== \"undefined\" ? method : 'GET',\n        // *GET, POST, PUT, DELETE, etc.\n        body: data // body data type must match \"Content-Type\" header\n\n      };\n\n      if (data === '') {\n        delete parameters.body;\n      } // Default options are marked with *\n\n\n      return fetch(backend_v1 + url, parameters).then(function (response) {\n        return response.json(); // switch (response.status) {\n        //   case \"200\":\n        //     return response.json();\n        //     break;\n        //   default:\n        //     return new Promise(function (resolve,reject) {\n        //       reject({error:response.status,text:response.statusText});\n        //     })\n        // }\n      }); // parses JSON response into native JavaScript objects\n    }\n  }, {\n    key: \"serverReq\",\n    value: function serverReq() {\n      var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var data = arguments.length > 1 ? arguments[1] : undefined;\n      var method = arguments.length > 2 ? arguments[2] : undefined;\n      var parameters = {\n        credentials: 'include',\n        method: method !== \"undefined\" ? method : 'GET',\n        // *GET, POST, PUT, DELETE, etc.\n        body: data !== 'application/json' ? data : _JSON$stringify(data) // body data type must match \"Content-Type\" header\n\n      };\n\n      if (data === '') {\n        delete parameters.body;\n      } // Default options are marked with *\n\n\n      return serverFetch(backend_v1 + url, parameters).then(function (response) {\n        return response.json(); // switch (response.status) {\n        //   case \"200\":\n        //     return response.json();\n        //     break;\n        //   default:\n        //     return new Promise(function (resolve,reject) {\n        //       reject({error:response.status,text:response.statusText});\n        //     })\n        // }\n      }); // parses JSON response into native JavaScript objects\n    }\n  }]);\n\n  return HttpHelper;\n}();\n\nexport default HttpHelper;","map":{"version":3,"sources":["/home/darnyelx/Projects/easycow/helpers/httpHelper.js"],"names":["serverFetch","backend_v1","HttpHelper","url","data","method","parameters","credentials","body","fetch","then","response","json"],"mappings":";;;AAAA,OAAOA,WAAP,MAA2B,YAA3B;AACA,SAAQC,UAAR,QAA+B,mBAA/B;;IAEMC,U;;;;;;;;;8BACkC;AAAA,UAAvBC,GAAuB,uEAAjB,EAAiB;AAAA,UAAbC,IAAa;AAAA,UAARC,MAAQ;AAEnC,UAAIC,UAAU,GAAG;AACfC,QAAAA,WAAW,EAAC,SADG;AAEfF,QAAAA,MAAM,EAAGA,MAAM,KAAK,WAAX,GAAwBA,MAAxB,GAA+B,KAFzB;AAEiC;AAChDG,QAAAA,IAAI,EAAEJ,IAHS,CAGH;;AAHG,OAAjB;;AAMC,UAAIA,IAAI,KAAK,EAAb,EAAgB;AACd,eAAOE,UAAU,CAACE,IAAlB;AACD,OAViC,CAclC;;;AACA,aAAOC,KAAK,CAACR,UAAU,GAACE,GAAZ,EAAiBG,UAAjB,CAAL,CACJI,IADI,CACE,UAACC,QAAD,EAAa;AAClB,eAAOA,QAAQ,CAACC,IAAT,EAAP,CADkB,CAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OAZI,CAAP,CAfkC,CA2B5B;AACP;;;gCACoC;AAAA,UAAtBT,GAAsB,uEAAhB,EAAgB;AAAA,UAAZC,IAAY;AAAA,UAAPC,MAAO;AACrC,UAAIC,UAAU,GAAG;AACfC,QAAAA,WAAW,EAAC,SADG;AAEfF,QAAAA,MAAM,EAAGA,MAAM,KAAK,WAAX,GAAwBA,MAAxB,GAA+B,KAFzB;AAEiC;AAChDG,QAAAA,IAAI,EAAEJ,IAAI,KAAK,kBAAT,GAA4BA,IAA5B,GAAiC,gBAAeA,IAAf,CAHxB,CAG8C;;AAH9C,OAAjB;;AAMA,UAAIA,IAAI,KAAK,EAAb,EAAgB;AACd,eAAOE,UAAU,CAACE,IAAlB;AACD,OAToC,CAYrC;;;AACA,aAAOR,WAAW,CAACC,UAAU,GAACE,GAAZ,EAAiBG,UAAjB,CAAX,CACJI,IADI,CACE,UAACC,QAAD,EAAa;AAClB,eAAOA,QAAQ,CAACC,IAAT,EAAP,CADkB,CAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OAZI,CAAP,CAbqC,CAyB/B;AACP;;;;;;AAEH,eAAeV,UAAf","sourcesContent":["import serverFetch    from 'node-fetch';\nimport {backend_v1}       from '../config/api_url';\n\nclass HttpHelper {\n  static httpReq(url = '', data,method) {\n\n     let parameters = {\n       credentials:'include',\n       method: (method !== \"undefined\" ?method:'GET'), // *GET, POST, PUT, DELETE, etc.\n       body: data, // body data type must match \"Content-Type\" header\n     }\n\n      if (data === ''){\n        delete parameters.body;\n      }\n\n\n\n      // Default options are marked with *\n      return fetch(backend_v1+url, parameters )\n        .then( (response)=> {\n          return response.json()\n          // switch (response.status) {\n          //   case \"200\":\n          //     return response.json();\n          //     break;\n          //   default:\n          //     return new Promise(function (resolve,reject) {\n          //       reject({error:response.status,text:response.statusText});\n          //     })\n          // }\n        }); // parses JSON response into native JavaScript objects\n    }\n  static serverReq(url = '', data,method){\n    let parameters = {\n      credentials:'include',\n      method: (method !== \"undefined\" ?method:'GET'), // *GET, POST, PUT, DELETE, etc.\n      body: data !== 'application/json'?data:JSON.stringify(data), // body data type must match \"Content-Type\" header\n    }\n\n    if (data === ''){\n      delete parameters.body;\n    }\n\n\n    // Default options are marked with *\n    return serverFetch(backend_v1+url, parameters )\n      .then( (response)=> {\n        return response.json()\n        // switch (response.status) {\n        //   case \"200\":\n        //     return response.json();\n        //     break;\n        //   default:\n        //     return new Promise(function (resolve,reject) {\n        //       reject({error:response.status,text:response.statusText});\n        //     })\n        // }\n      }); // parses JSON response into native JavaScript objects\n  }\n}\nexport default HttpHelper;"]},"metadata":{},"sourceType":"module"}