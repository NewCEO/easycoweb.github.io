{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport DashBoardLayOut from '../../layouts/AdminDashboardLayout';\nimport CreateFarmForm from '../../components/createFarm';\nimport isAdmin from '../../middlewares/isAdmin';\nimport $ from 'jquery';\nimport httpHelper from \"../../helpers/httpHelper\";\nimport HelpBlock from \"../../components/loginForm\";\nimport FormHelpText from \"../../components/signupForm\";\nimport Router from \"next/dist/client/router\";\n\nvar createFarm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(createFarm, _React$Component);\n\n  _createClass(createFarm, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var req;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = _ref.req;\n                return _context.abrupt(\"return\", {\n                  farmId: req.params.farmId\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function createFarm(props) {\n    var _this;\n\n    _classCallCheck(this, createFarm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(createFarm).call(this, props));\n    _this.state = {\n      name: '',\n      redirect: false,\n      emailHelpText: {\n        state: false,\n        error: false,\n        text: ''\n      },\n      nameHelpText: {\n        state: false,\n        error: false,\n        text: ''\n      },\n      helpBlock: {\n        state: false,\n        error: false,\n        text: ''\n      }\n    };\n    return _this;\n  }\n\n  _createClass(createFarm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      isAdmin();\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var target = event.target;\n      var value = target.type === 'checkbox' ? target.checked : target.value;\n      var name = target.name;\n      this.setState(_defineProperty({}, name, value));\n\n      switch (target.name) {\n        case 'name':\n          this.validateName(target.value);\n          break;\n\n        case 'email':\n          this.validateEmail(target.value);\n          break;\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n      this.setState({\n        loginHelpBlock: {\n          state: false,\n          error: false,\n          text: ''\n        }\n      });\n      var formData = new FormData();\n      formData.append('name', this.state.name);\n      formData.append('email', this.state.email);\n      formData.append('permission', this.state.permission);\n      HttpHelper.httpReq('http://localhost:3009/api/v1/user/admin/create', formData, 'POST').then(function (response) {\n        if (response.success) {\n          _this2.setState({\n            helpBlock: {\n              state: true,\n              error: false,\n              text: 'user created successfully'\n            }\n          });\n        } else {\n          _this2.setState({\n            helpBlock: {\n              state: true,\n              error: true,\n              text: 'error creating user'\n            }\n          });\n        }\n      }).catch(function (error) {\n        _this2.setState({\n          helpBlock: {\n            state: true,\n            error: true,\n            text: 'error creating user'\n          }\n        });\n      });\n    }\n  }, {\n    key: \"validateEmail\",\n    value: function validateEmail(email) {\n      var _this3 = this;\n\n      if (email !== 'undefined') {\n        return new _Promise(function (resolve, reject) {\n          HttpHelper.httpReq('http://localhost:3009/api/v1/email/exists?email=' + email, '', 'GET').then(function (result) {\n            console.log(result, 'result'); // console.log(JSON.stringify(result),'does email exist');\n\n            if (result.message === true) {\n              _this3.setState({\n                emailHelpText: {\n                  state: true,\n                  error: true,\n                  text: 'Email already exist'\n                }\n              });\n            } else {\n              _this3.setState({\n                emailHelpText: {\n                  state: false,\n                  error: false,\n                  text: ' '\n                }\n              });\n            }\n\n            resolve(_this3.state.emailHelpText.error);\n          }).catch(function (error) {\n            console.log(error);\n          });\n        });\n      } else {\n        this.setState({\n          emailHelpText: {\n            state: true,\n            error: true,\n            text: 'Email already exist'\n          }\n        });\n      }\n    }\n  }, {\n    key: \"validateName\",\n    value: function validateName(input) {\n      if (input.trim() === '') {\n        this.setState({\n          nameHelpText: {\n            state: true,\n            error: true,\n            text: 'Name is required'\n          }\n        });\n        return false;\n      } else {\n        this.setState({\n          nameHelpText: {\n            state: false,\n            error: false,\n            text: 'Name is required'\n          }\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"getAdminTypes\",\n    value: function getAdminTypes() {\n      var _this4 = this;\n\n      httpHelper.serverReq('http://localhost:3009/api/v1/farms/all').then(function (response) {\n        if (response.success) {\n          _this4.setState({\n            userTypes: response.success.data\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(DashBoardLayOut, null, React.createElement(\"hr\", null), React.createElement(\"h2\", {\n        id: \"form-head\"\n      }, \"Create Admin User\"), React.createElement(\"br\", null), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\"\n      }, React.createElement(\"div\", {\n        className: \"panel panel-primary\",\n        \"data-collapsed\": \"0\",\n        id: \"form\"\n      }, React.createElement(\"div\", {\n        className: \"panel-body\"\n      }, React.createElement(\"form\", {\n        role: \"form\",\n        id: \"farmForm\",\n        ref: this.form,\n        onSubmit: this.handleSubmit,\n        className: \"form-horizontal  form-groups-bordered\"\n      }, this.state.farmNotification.state ? React.createElement(HelpBlock, {\n        type: this.state.farmNotification.error,\n        text: this.state.farmNotification.text\n      }) : '', React.createElement(\"div\", {\n        className: \"form-group\"\n      }, React.createElement(\"label\", {\n        htmlFor: \"field-1\",\n        className: \"col-sm-3 control-label\"\n      }, \"Farm Name\"), React.createElement(\"div\", {\n        className: \"col-sm-5\"\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        value: this.state.formValues.title,\n        required: \"required\",\n        onChange: this.handleChange,\n        className: \"form-control\",\n        id: \"field-1\",\n        placeholder: \"Enter User's Name\"\n      }))), React.createElement(\"div\", {\n        className: \"form-group\"\n      }, React.createElement(\"label\", {\n        htmlFor: \"field-1\",\n        className: \"col-sm-3 control-label\"\n      }, \"Farm Name\"), React.createElement(\"div\", {\n        className: \"col-sm-5\"\n      }, React.createElement(\"input\", {\n        type: \"email\",\n        name: \"password\",\n        value: this.state.formValues.title,\n        required: \"required\",\n        onChange: this.handleChange,\n        className: \"form-control\",\n        id: \"field-1\",\n        placeholder: \"Enter User's Email \"\n      }))), React.createElement(\"div\", {\n        className: \"form-group\"\n      }, React.createElement(\"label\", {\n        htmlFor: \"field-2\",\n        className: \"col-sm-3 control-label\"\n      }, \"User Type\"), React.createElement(\"div\", {\n        className: \"col-sm-5\"\n      }, React.createElement(\"select\", {\n        name: \"location\",\n        onChange: this.handleChange,\n        value: this.state.formValues.location,\n        required: \"required\",\n        className: \"form-control\",\n        id: \"field-2\",\n        placeholder: \"Placeholder\"\n      }, React.createElement(\"option\", null, \"select a location\"), this.state.location)))))))));\n    }\n  }]);\n\n  return createFarm;\n}(React.Component);\n\nexport default createFarm;","map":{"version":3,"sources":["C:\\xampp\\htdocs\\easycow\\pages\\admin\\create-user.js"],"names":["React","DashBoardLayOut","CreateFarmForm","isAdmin","$","httpHelper","HelpBlock","FormHelpText","Router","createFarm","req","farmId","params","props","state","name","redirect","emailHelpText","error","text","nameHelpText","helpBlock","e","target","event","value","type","checked","setState","validateName","validateEmail","preventDefault","loginHelpBlock","formData","FormData","append","email","permission","HttpHelper","httpReq","then","response","success","catch","resolve","reject","result","console","log","message","input","trim","serverReq","userTypes","data","form","handleSubmit","farmNotification","formValues","title","handleChange","location","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport DashBoardLayOut from '../../layouts/AdminDashboardLayout';\r\nimport CreateFarmForm from '../../components/createFarm';\r\nimport isAdmin from  '../../middlewares/isAdmin';\r\nimport $ from 'jquery';\r\nimport httpHelper from \"../../helpers/httpHelper\";\r\nimport HelpBlock from \"../../components/loginForm\";\r\nimport FormHelpText from \"../../components/signupForm\";\r\nimport Router from \"next/dist/client/router\";\r\n\r\nclass createFarm extends React.Component{\r\n\r\n  static async getInitialProps({ req }) {\r\n    return {farmId:req.params.farmId};\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      name:'',\r\n      redirect:false,\r\n      emailHelpText :{\r\n        state:false,\r\n        error:false,\r\n        text:''\r\n      },\r\n      nameHelpText:{\r\n        state:false,\r\n        error:false,\r\n        text:''\r\n      },\r\n      helpBlock:{\r\n        state:false,\r\n        error:false,\r\n        text:''\r\n      },\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    isAdmin();\r\n\r\n  }\r\n\r\n  handleChange(e){\r\n\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n    switch (target.name) {\r\n      case 'name':\r\n        this.validateName(target.value);\r\n        break;\r\n\r\n      case 'email':\r\n        this.validateEmail(target.value);\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n  handleSubmit(e){\r\n    e.preventDefault();\r\n    this.setState({ loginHelpBlock:{\r\n        state:false,\r\n        error:false,\r\n        text:''\r\n      }});\r\n\r\n    let formData = new FormData();\r\n    formData.append('name',this.state.name);\r\n    formData.append('email',this.state.email);\r\n    formData.append('permission',this.state.permission);\r\n\r\n\r\n\r\n    HttpHelper.httpReq('http://localhost:3009/api/v1/user/admin/create',formData,'POST')\r\n      .then((response)=>{\r\n        if (response.success){\r\n          this.setState({ helpBlock:{\r\n              state:true,\r\n              error:false,\r\n              text:'user created successfully'\r\n            }});\r\n        }else{\r\n          this.setState({ helpBlock:{\r\n              state:true,\r\n              error:true,\r\n              text:'error creating user'\r\n            }});\r\n        }\r\n      }).catch((error)=>{\r\n      this.setState({ helpBlock:{\r\n          state:true,\r\n          error:true,\r\n          text:'error creating user'\r\n        }});\r\n      });\r\n\r\n  }\r\n\r\n  validateEmail(email){\r\n    if (email !== 'undefined'){\r\n      return new Promise( (resolve,reject)=> {\r\n        HttpHelper.httpReq('http://localhost:3009/api/v1/email/exists?email='+email,'','GET')\r\n          .then((result)=>{\r\n            console.log(result,'result');\r\n            // console.log(JSON.stringify(result),'does email exist');\r\n            if (result.message === true){\r\n              this.setState({\r\n                emailHelpText:{\r\n                  state:true,\r\n                  error:true,\r\n                  text:'Email already exist'\r\n                }\r\n              });\r\n            }else{\r\n              this.setState({\r\n                emailHelpText:{\r\n                  state:false,\r\n                  error:false,\r\n                  text:' '\r\n                }\r\n              });\r\n            }\r\n            resolve(this.state.emailHelpText.error);\r\n          }).catch((error)=>{console.log(error)});\r\n      })\r\n    }else{\r\n      this.setState({\r\n        emailHelpText:{\r\n          state:true,\r\n          error:true,\r\n          text:'Email already exist'\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  validateName(input){\r\n    if (input.trim() === ''){\r\n      this.setState({nameHelpText:{\r\n          state:true,\r\n          error:true,\r\n          text:'Name is required'\r\n        }});\r\n      return false;\r\n    }else{\r\n      this.setState({nameHelpText:{\r\n          state:false,\r\n          error:false,\r\n          text:'Name is required'\r\n        }});\r\n      return true;\r\n    }\r\n  }\r\n\r\n  getAdminTypes(){\r\n    httpHelper.serverReq('http://localhost:3009/api/v1/farms/all').then( (response)=> {\r\n      if (response.success){\r\n        this.setState({userTypes:response.success.data});\r\n      }\r\n    })\r\n    }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <DashBoardLayOut>\r\n        <hr/>\r\n        <h2 id=\"form-head\">Create Admin User</h2>\r\n        <br/>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <div className=\"panel panel-primary\" data-collapsed=\"0\" id=\"form\">\r\n              <div className=\"panel-body\">\r\n                <form role=\"form\" id=\"farmForm\" ref={this.form} onSubmit={this.handleSubmit} className=\"form-horizontal  form-groups-bordered\">\r\n                  {\r\n\r\n                    this.state.farmNotification.state?<HelpBlock type={this.state.farmNotification.error} text={this.state.farmNotification.text} />:''\r\n                  }\r\n\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"field-1\" className=\"col-sm-3 control-label\">Farm Name</label>\r\n\r\n                    <div className=\"col-sm-5\">\r\n                      <input type=\"text\" name=\"name\" value={this.state.formValues.title} required=\"required\" onChange={this.handleChange} className=\"form-control\" id=\"field-1\" placeholder=\"Enter User's Name\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"field-1\" className=\"col-sm-3 control-label\">Farm Name</label>\r\n\r\n                    <div className=\"col-sm-5\">\r\n                      <input type=\"email\" name=\"password\" value={this.state.formValues.title} required=\"required\" onChange={this.handleChange} className=\"form-control\" id=\"field-1\" placeholder=\"Enter User's Email \" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"field-2\" className=\"col-sm-3 control-label\">User Type</label>\r\n\r\n                    <div className=\"col-sm-5\">\r\n                      <select name=\"location\"  onChange={this.handleChange} value={this.state.formValues.location} required=\"required\" className=\"form-control\" id=\"field-2\" placeholder=\"Placeholder\" >\r\n                        <option>select a location</option>\r\n                        {this.state.location}\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n\r\n\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </DashBoardLayOut>\r\n    )\r\n  }\r\n}\r\n\r\nexport default createFarm;\r\n"]},"metadata":{},"sourceType":"module"}