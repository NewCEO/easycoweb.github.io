{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport DashBoardLayOut from '../../layouts/AdminDashboardLayout';\nimport httpHelper from \"../../helpers/httpHelper\";\n\nvar createFarm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(createFarm, _React$Component);\n\n  function createFarm() {\n    _classCallCheck(this, createFarm);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(createFarm).apply(this, arguments));\n  }\n\n  _createClass(createFarm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getInvestors();\n    }\n  }, {\n    key: \"getInvestors\",\n    value: function getInvestors() {\n      var _this = this;\n\n      httpHelper.serverReq(\"http://localhost:3009/api/v1/farms/\" + this.props.farmId + \"/investments\", \"\", \"POST\").then(function (response) {\n        if (response.success) {\n          _this.setState({\n            farmDet: response.success.farm,\n            investments: response.success.investments\n          });\n\n          _this.state.investments.map(function (investment) {\n            return React.createElement(\"tr\", null, React.createElement(\"td\", null, investment.investor_name), React.createElement(\"td\", null, investment.invested_date), React.createElement(\"td\", null, _this.calculatePaymentDate(investment.invested_date, _this.duration(investment.funding_starts, investment.funding_ends))), React.createElement(\"td\", null, investment.quantity), React.createElement(\"td\", null, _this.calculateInvestedAmount(investment.roi, investment.price_per_unit)), React.createElement(\"td\", null, _this.calculateInvestedAmount(investment.roi, investment.price_per_unit) + investment.quantity), React.createElement(\"td\", null, investment.investment_status), React.createElement(\"td\", null, investment.investment_status_id === status.ripe ? React.createElement(PayInvestor, {\n              investorId: investment.investor_id\n            }) : \"\"));\n          });\n        }\n      });\n    }\n  }, {\n    key: \"calculateMonth\",\n    value: function calculateMonth(d1, d2) {\n      var months;\n      months = (d2.getFullYear() - d1.getFullYear()) * 12;\n      months -= d1.getMonth();\n      months += d2.getMonth();\n      return months <= 0 ? 0 : months;\n    }\n  }, {\n    key: \"calculatePaymentDate\",\n    value: function calculatePaymentDate(investedDate, duration) {\n      var date = new Date();\n      date.setMonth(new Date(investedDate).getMonth() + duration);\n      return date.toISOString();\n    }\n  }, {\n    key: \"calculateInvestedAmount\",\n    value: function calculateInvestedAmount(roi, pricePerUnit) {\n      return roi * pricePerUnit / 100;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(DashBoardLayOut, null, React.createElement(\"hr\", null), React.createElement(\"h2\", {\n        id: \"form-head\"\n      }, \"All Farm (\", this.state.farmDet.name, \") Investments \"), React.createElement(\"br\", null), React.createElement(\"table\", {\n        className: \"table table-bordered datatable\",\n        id: \"table-3\"\n      }, React.createElement(\"thead\", null, React.createElement(\"tr\", {\n        className: \"replace-inputs\"\n      }, React.createElement(\"th\", null, \"Investor's Name\"), React.createElement(\"th\", null, \"Invested Date\"), React.createElement(\"th\", null, \"Due Date\"), React.createElement(\"th\", null, \"Total Units Bought\"), React.createElement(\"th\", null, \"Total Amount Paid\"), React.createElement(\"th\", null, \"Total Returnable Amount\"), React.createElement(\"th\", null, \"Status\"), React.createElement(\"th\", null, \"Action\"))), React.createElement(\"tbody\", null, this.state.allFarms), React.createElement(\"tfoot\", null, React.createElement(\"tr\", null, React.createElement(\"th\", null, \"Farm Name\"), React.createElement(\"th\", null, \"Duration\"), React.createElement(\"th\", null, \"Price\"), React.createElement(\"th\", null, \"Returns Percentage\"), React.createElement(\"th\", null, \"Units Available\"), React.createElement(\"th\", null, \"Units Bought\"), React.createElement(\"th\", null, \"Actions\")))), React.createElement(\"br\", null), React.createElement(\"br\", null));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var req;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = _ref.req;\n                return _context.abrupt(\"return\", {\n                  farmId: req.params.farmId\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return createFarm;\n}(React.Component);\n\nexport default createFarm;","map":{"version":3,"sources":["C:\\xampp\\htdocs\\easycow\\pages\\admin\\all-investments.js"],"names":["React","DashBoardLayOut","httpHelper","createFarm","getInvestors","serverReq","props","farmId","then","response","success","setState","farmDet","farm","investments","state","map","investment","investor_name","invested_date","calculatePaymentDate","duration","funding_starts","funding_ends","quantity","calculateInvestedAmount","roi","price_per_unit","investment_status","investment_status_id","status","ripe","investor_id","d1","d2","months","getFullYear","getMonth","investedDate","date","Date","setMonth","toISOString","pricePerUnit","name","allFarms","req","params","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;IAEMC,U;;;;;;;;;;;;;wCAMgB;AAClB,WAAKC,YAAL;AACD;;;mCAEa;AAAA;;AACZF,MAAAA,UAAU,CAACG,SAAX,CAAqB,wCAAsC,KAAKC,KAAL,CAAWC,MAAjD,GAAwD,cAA7E,EAA4F,EAA5F,EAA+F,MAA/F,EAAuGC,IAAvG,CAA6G,UAACC,QAAD,EAAa;AACxH,YAAIA,QAAQ,CAACC,OAAb,EAAqB;AACnB,UAAA,KAAI,CAACC,QAAL,CAAc;AAACC,YAAAA,OAAO,EAACH,QAAQ,CAACC,OAAT,CAAiBG,IAA1B;AAA+BC,YAAAA,WAAW,EAACL,QAAQ,CAACC,OAAT,CAAiBI;AAA5D,WAAd;;AACA,UAAA,KAAI,CAACC,KAAL,CAAWD,WAAX,CAAuBE,GAAvB,CAA2B,UAACC,UAAD,EAAc;AACvC,mBAAO,gCACG,gCAAKA,UAAU,CAACC,aAAhB,CADH,EAEG,gCAAKD,UAAU,CAACE,aAAhB,CAFH,EAGG,gCAAK,KAAI,CAACC,oBAAL,CAA0BH,UAAU,CAACE,aAArC,EAAmD,KAAI,CAACE,QAAL,CAAcJ,UAAU,CAACK,cAAzB,EAAwCL,UAAU,CAACM,YAAnD,CAAnD,CAAL,CAHH,EAIG,gCAAKN,UAAU,CAACO,QAAhB,CAJH,EAKI,gCAAK,KAAI,CAACC,uBAAL,CAA6BR,UAAU,CAACS,GAAxC,EAA4CT,UAAU,CAACU,cAAvD,CAAL,CALJ,EAMG,gCAAK,KAAI,CAACF,uBAAL,CAA6BR,UAAU,CAACS,GAAxC,EAA4CT,UAAU,CAACU,cAAvD,IAAyEV,UAAU,CAACO,QAAzF,CANH,EAOG,gCAAKP,UAAU,CAACW,iBAAhB,CAPH,EAQG,gCACMX,UAAU,CAACY,oBAAX,KAAoCC,MAAM,CAACC,IAA3C,GAAgD,oBAAC,WAAD;AAAa,cAAA,UAAU,EAAEd,UAAU,CAACe;AAApC,cAAhD,GAAmG,EADzG,CARH,CAAP;AAaD,WAdD;AAeD;AACF,OAnBD;AAoBD;;;mCAEcC,E,EAAGC,E,EAAG;AACnB,UAAIC,MAAJ;AACAA,MAAAA,MAAM,GAAG,CAACD,EAAE,CAACE,WAAH,KAAmBH,EAAE,CAACG,WAAH,EAApB,IAAwC,EAAjD;AACAD,MAAAA,MAAM,IAAIF,EAAE,CAACI,QAAH,EAAV;AACAF,MAAAA,MAAM,IAAID,EAAE,CAACG,QAAH,EAAV;AACA,aAAOF,MAAM,IAAI,CAAV,GAAc,CAAd,GAAkBA,MAAzB;AACD;;;yCAEoBG,Y,EAAajB,Q,EAAS;AAEzC,UAAIkB,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACAD,MAAAA,IAAI,CAACE,QAAL,CAAc,IAAID,IAAJ,CAASF,YAAT,EAAuBD,QAAvB,KAAoChB,QAAlD;AACA,aAAQkB,IAAI,CAACG,WAAL,EAAR;AAED;;;4CAEuBhB,G,EAAIiB,Y,EAAa;AAExC,aAAQjB,GAAG,GAAGiB,YAAP,GAAqB,GAA5B;AACA;;;6BAUQ;AACP,aACE,oBAAC,eAAD,QAEE,+BAFF,EAKE;AAAI,QAAA,EAAE,EAAC;AAAP,uBAA8B,KAAK5B,KAAL,CAAWH,OAAX,CAAmBgC,IAAjD,mBALF,EAME,+BANF,EASE;AAAO,QAAA,SAAS,EAAC,gCAAjB;AAAkD,QAAA,EAAE,EAAC;AAArD,SACE,mCACA;AAAI,QAAA,SAAS,EAAC;AAAd,SACE,kDADF,EAEE,gDAFF,EAGE,2CAHF,EAIE,qDAJF,EAKE,oDALF,EAME,0DANF,EAOE,yCAPF,EAQE,yCARF,CADA,CADF,EAaE,mCAEC,KAAK7B,KAAL,CAAW8B,QAFZ,CAbF,EAiBE,mCACA,gCACE,4CADF,EAEE,2CAFF,EAGE,wCAHF,EAIE,qDAJF,EAKE,kDALF,EAME,+CANF,EAOE,0CAPF,CADA,CAjBF,CATF,EAwCE,+BAxCF,EAyCE,+BAzCF,CADF;AA6CD;;;;;;;;;;;;AA1G8BC,gBAAAA,G,QAAAA,G;iDACtB;AAACvC,kBAAAA,MAAM,EAACuC,GAAG,CAACC,MAAJ,CAAWxC;AAAnB,iB;;;;;;;;;;;;;;;;;;;EAHcP,KAAK,CAACgD,S;;AA+G/B,eAAe7C,UAAf","sourcesContent":["import React from 'react';\r\nimport DashBoardLayOut from '../../layouts/AdminDashboardLayout';\r\nimport httpHelper from \"../../helpers/httpHelper\";\r\n\r\nclass createFarm extends React.Component{\r\n\r\n  static async getInitialProps({ req }) {\r\n    return {farmId:req.params.farmId};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getInvestors();\r\n  }\r\n\r\n  getInvestors(){\r\n    httpHelper.serverReq(\"http://localhost:3009/api/v1/farms/\"+this.props.farmId+\"/investments\",\"\",\"POST\").then( (response)=> {\r\n      if (response.success){\r\n        this.setState({farmDet:response.success.farm,investments:response.success.investments});\r\n        this.state.investments.map((investment)=>{\r\n          return <tr>\r\n                    <td>{investment.investor_name}</td>\r\n                    <td>{investment.invested_date}</td>\r\n                    <td>{this.calculatePaymentDate(investment.invested_date,this.duration(investment.funding_starts,investment.funding_ends))}</td>\r\n                    <td>{investment.quantity}</td>\r\n                     <td>{this.calculateInvestedAmount(investment.roi,investment.price_per_unit) }</td>\r\n                    <td>{this.calculateInvestedAmount(investment.roi,investment.price_per_unit) + investment.quantity}</td>\r\n                    <td>{investment.investment_status}</td>\r\n                    <td>{\r\n                          investment.investment_status_id === status.ripe?<PayInvestor investorId={investment.investor_id}/>:\"\"\r\n                        }\r\n                    </td>\r\n                </tr>\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  calculateMonth(d1,d2){\r\n    var months;\r\n    months = (d2.getFullYear() - d1.getFullYear()) * 12;\r\n    months -= d1.getMonth();\r\n    months += d2.getMonth();\r\n    return months <= 0 ? 0 : months;\r\n  }\r\n\r\n  calculatePaymentDate(investedDate,duration){\r\n\r\n    let date = new Date();\r\n    date.setMonth(new Date(investedDate).getMonth() + duration);\r\n    return  date.toISOString();\r\n\r\n  }\r\n\r\n  calculateInvestedAmount(roi,pricePerUnit){\r\n\r\n   return (roi * pricePerUnit)/100;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return(\r\n      <DashBoardLayOut>\r\n\r\n        <hr/>\r\n\r\n\r\n        <h2 id=\"form-head\">All Farm ({this.state.farmDet.name}) Investments </h2>\r\n        <br/>\r\n\r\n\r\n        <table className=\"table table-bordered datatable\" id=\"table-3\">\r\n          <thead>\r\n          <tr className=\"replace-inputs\">\r\n            <th>Investor's Name</th>\r\n            <th>Invested Date</th>\r\n            <th>Due Date</th>\r\n            <th>Total Units Bought</th>\r\n            <th>Total Amount Paid</th>\r\n            <th>Total Returnable Amount</th>\r\n            <th>Status</th>\r\n            <th>Action</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n\r\n          {this.state.allFarms}\r\n          </tbody>\r\n          <tfoot>\r\n          <tr>\r\n            <th>Farm Name</th>\r\n            <th>Duration</th>\r\n            <th>Price</th>\r\n            <th>Returns Percentage</th>\r\n            <th>Units Available</th>\r\n            <th>Units Bought</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n          </tfoot>\r\n        </table>\r\n\r\n\r\n        <br/>\r\n        <br/>\r\n      </DashBoardLayOut>\r\n    )\r\n  }\r\n}\r\n\r\nexport default createFarm;\r\n"]},"metadata":{},"sourceType":"module"}