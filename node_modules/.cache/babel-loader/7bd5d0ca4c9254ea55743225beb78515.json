{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar HttpHelper =\n/*#__PURE__*/\nfunction () {\n  function HttpHelper() {\n    _classCallCheck(this, HttpHelper);\n  }\n\n  _createClass(HttpHelper, null, [{\n    key: \"httpReq\",\n    value: function httpReq() {\n      var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var data = arguments.length > 1 ? arguments[1] : undefined;\n      var method = arguments.length > 2 ? arguments[2] : undefined;\n      var contentType;\n\n      if (data instanceof FormData) {\n        contentType = 'multipart/form-data; boundary=???';\n      } else {\n        contentType = 'application/json';\n      }\n\n      var parameters = {\n        method: method !== \"undefined\" ? method : 'GET',\n        // *GET, POST, PUT, DELETE, etc.\n        headers: {\n          'Content-Type': contentType // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        },\n        body: data === 'multipart/form-data; boundary=???' ? data : _JSON$stringify(data) // body data type must match \"Content-Type\" header\n\n      };\n\n      if (data === '') {\n        delete parameters.body;\n      }\n\n      console.log(parameters, 'parameters'); // Default options are marked with *\n\n      return fetch(url, parameters).then(function (response) {\n        return response.json(); // switch (response.status) {\n        //   case \"200\":\n        //     return response.json();\n        //     break;\n        //   default:\n        //     return new Promise(function (resolve,reject) {\n        //       reject({error:response.status,text:response.statusText});\n        //     })\n        // }\n      }); // parses JSON response into native JavaScript objects\n    }\n  }]);\n\n  return HttpHelper;\n}();\n\nexport default HttpHelper;","map":{"version":3,"sources":["C:\\xampp\\htdocs\\easycow\\helpers\\httpHelper.js"],"names":["HttpHelper","url","data","method","contentType","FormData","parameters","headers","body","console","log","fetch","then","response","json"],"mappings":";;;;IAAMA,U;;;;;;;;;8BACkC;AAAA,UAAvBC,GAAuB,uEAAjB,EAAiB;AAAA,UAAbC,IAAa;AAAA,UAARC,MAAQ;AAClC,UAAIC,WAAJ;;AACA,UAAIF,IAAI,YAAaG,QAArB,EAA8B;AAC3BD,QAAAA,WAAW,GAAG,mCAAd;AACF,OAFD,MAEK;AACFA,QAAAA,WAAW,GAAG,kBAAd;AACF;;AAEF,UAAIE,UAAU,GAAG;AACfH,QAAAA,MAAM,EAAGA,MAAM,KAAK,WAAX,GAAwBA,MAAxB,GAA+B,KADzB;AACiC;AAChDI,QAAAA,OAAO,EAAE;AACP,0BAAgBH,WADT,CAEP;;AAFO,SAFM;AAMfI,QAAAA,IAAI,EAAEN,IAAI,KAAK,mCAAT,GAA6CA,IAA7C,GAAkD,gBAAeA,IAAf,CANzC,CAM+D;;AAN/D,OAAjB;;AASC,UAAIA,IAAI,KAAK,EAAb,EAAgB;AACd,eAAOI,UAAU,CAACE,IAAlB;AACD;;AAEDC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ,EAAuB,YAAvB,EArBkC,CAuBlC;;AACA,aAAOK,KAAK,CAACV,GAAD,EAAMK,UAAN,CAAL,CACJM,IADI,CACE,UAACC,QAAD,EAAa;AAClB,eAAOA,QAAQ,CAACC,IAAT,EAAP,CADkB,CAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OAZI,CAAP,CAxBkC,CAoC5B;AACP;;;;;;AAEL,eAAed,UAAf","sourcesContent":["class HttpHelper {\r\n  static httpReq(url = '', data,method) {\r\n      let contentType;\r\n      if (data instanceof  FormData){\r\n         contentType = 'multipart/form-data; boundary=???';\r\n      }else{\r\n         contentType = 'application/json';\r\n      }\r\n\r\n     let parameters = {\r\n       method: (method !== \"undefined\" ?method:'GET'), // *GET, POST, PUT, DELETE, etc.\r\n       headers: {\r\n         'Content-Type': contentType,\r\n         // 'Content-Type': 'application/x-www-form-urlencoded',\r\n       },\r\n       body: data === 'multipart/form-data; boundary=???'?data:JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n     }\r\n\r\n      if (data === ''){\r\n        delete parameters.body;\r\n      }\r\n\r\n      console.log(parameters,'parameters');\r\n\r\n      // Default options are marked with *\r\n      return fetch(url, parameters )\r\n        .then( (response)=> {\r\n          return response.json()\r\n          // switch (response.status) {\r\n          //   case \"200\":\r\n          //     return response.json();\r\n          //     break;\r\n          //   default:\r\n          //     return new Promise(function (resolve,reject) {\r\n          //       reject({error:response.status,text:response.statusText});\r\n          //     })\r\n          // }\r\n        }); // parses JSON response into native JavaScript objects\r\n    }\r\n}\r\nexport default HttpHelper;"]},"metadata":{},"sourceType":"module"}